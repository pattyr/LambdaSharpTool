{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp CloudFormation Test",
  "Resources": {
    "RollbarToken": {
      "Type": "Custom::LambdaSharpRollbarProject",
      "Properties": {
        "ServiceToken": "arn:aws:sns:us-east-1:123456789012:LambdaSharpRollbar-RollbarCustomResourceTopic",
        "Project": "TestDeployment",
        "Tier": "TestTier"
      }
    },
    "AppRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": "arn:aws:sqs:us-east-1:123456789012:LambdaSharp-DeadLetterQueue"
                }
              ]
            },
            "PolicyName": "TestTier-TestDeployment-policy"
          }
        ]
      }
    },
    "Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdsharp-bucket-name",
          "S3Key": "TestDeployment/TestDeployment.Function-NOCOMPILE.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sqs:us-east-1:123456789012:LambdaSharp-DeadLetterQueue"
        },
        "Environment": {
          "Variables": {
            "TIER": "TestTier",
            "APPNAME": "TestDeployment",
            "STACKNAME": "TestTier-TestDeployment",
            "DEADLETTERQUEUE": "https://sqs.us-east-1.amazonaws.com/123456789012/LambdaSharp-DeadLetterQueue",
            "LAMBDARUNTIME": "dotnetcore2.1",
            "STACK_ROLLBARTOKEN": {
              "Fn::GetAtt": [
                "RollbarToken",
                "Result"
              ]
            }
          }
        },
        "FunctionName": "TestTier-TestDeployment-Function",
        "Handler": "TestDeployment.Function::MindTouch.LambdaSharpTestDeployment.Function.Function::FunctionHandlerAsync",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "AppRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Tags": [
          {
            "Key": "lambdasharp:tier",
            "Value": "TestTier"
          },
          {
            "Key": "lambdasharp:deployment",
            "Value": "TestDeployment"
          }
        ],
        "Timeout": "30"
      }
    },
    "FunctionScheduleEvent01": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "Function",
                "Arn"
              ]
            },
            "Id": "TestTier-TestDeployment-FunctionScheduleEvent01",
            "InputTransformer": {
              "InputPathsMap": {
                "version": "$.version",
                "id": "$.id",
                "source": "$.source",
                "account": "$.account",
                "time": "$.time",
                "region": "$.region"
              },
              "InputTemplate": "{\r\n  \"Version\": <version>,\r\n  \"Id\": <id>,\r\n  \"Source\": <source>,\r\n  \"Account\": <account>,\r\n  \"Time\": <time>,\r\n  \"Region\": <region>,\r\n  \"tName\": \"MyTimer\"\r\n}"
            }
          }
        ]
      }
    },
    "FunctionScheduleEventPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceAccount": "123456789012"
      }
    }
  }
}